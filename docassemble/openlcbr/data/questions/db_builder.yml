features:
  navigation: True
  javascript: list_collapse.js
  css: list_collapse.css
---
sections:
  - Introduction
  - Factors
  - Cases
  - Issues
  - Conclusion
---
imports:
  - re
---
modules:
  - docassemble.base.core
  - docassemble.base.util
  - .ibp_data
---
metadata:
  comments: |
    This is an interview designed to allow you to do the data entry to generate an IBP
    model and database for use with docassemble-openlcbr.
    
    If you become aware of issues with this tool please raise them at:
    https://github.com/Gauntlet173/docassemble-openlcbr
---
objects:
  - factors: DAList.using(object_type=DAObject)
  - cases: DAList.using(object_type=DAIBPCase)
  - model: DAObject
  - model.ko_factors: DAList
  - model.issues: DAIBPIssue
  - data: DAIBPData
  - database: DAFile
  - upload: DAFile
---
code: |
  # When the review starts, it should start at the root of the issue tree.
  issue_review_screen_target = model.issues
  set_review_target = True
---
mandatory: True
code: |
  # This is the main flow code block.
  
  # This sets the type of the root object so it won't be calculated.
  model.issues.type = "top"
  
  
  # This forces the root of the issues tree to be collected completely.
  model.issues.branches.complete_attribute = "complete"
  factors.complete_attribute = "complete"
  cases.complete_attribute = "complete"

  intro
  use_existing_or_new
  
  if not use_existing:
    factors.gather()
  factors_reviewed
  
  if not use_existing:
    cases.gather()
  cases_reviewed

  if not use_existing:
    
    # Collecting this variable forces it to recursively collect the tree if there
    # are issues to collect.
    if model.issues.build:
      model.issues.complete
    # The way we collect factors is all at once.
    model.ko_factors.there_is_another = False
  set_review_target
  issue_review_finished
  ko_factors_reviewed
  
  database.initialize(filename="da-openlcbr.yml")
  yaml_output = data.output_yaml(factors, cases, model)
  database.write(yaml_output)
  summary
---
code: |
  if use_existing:
    upload
    import_yaml_to_DA(upload[0].path(), factors, cases, model)
  use_existing_or_new = True
---
question: Existing or New Reasoner?
subquestion: |
  Do you want to generate a new reasoner from scratch, or edit an existing reasoner?
  
  If you choose to create a new reasoner, you will be taken step-by-step through
  the process.
  
  If you wish to edit a reasoner built with this tool previously, you will need to
  upload the .yml file.
field: use_existing
buttons:
  - "New Reasoner": False
  - "Edit Existing Reasoner": True
section: Introduction
---
question: Upload Reasoner File
fields:
  - Your Reasoner: upload
    datatype: file
section: Introduction
---
generic object: DAIBPIssue
code: |
  # This forces a collection of a DAIBPIssue's sub-issues before it is complete
  x.branches.complete_attribute = "complete"
  x.id
  x.text
  for y in x.branches:
    y.complete
  if x.branches.there_are_any:
    x.type = "int"
    x.join_type
    if len(x.factors) > 0:
      x.factors.clear()
  else:
    if x.instanceName <> "model.issues":
      x.type = "leaf" 
    if x.attr('join_type') <> "":
      x.join_type = ""
    x.factors.gather()
  x.complete = True
---
code: |
  if factors[i].id:
    factors[i].complete = True
  else:
    factors[i].complete = False
---
code: |
  if cases[i].id:
    cases[i].complete = True
  else:
    cases[i].complete = False
---
mandatory: True
question: |
  Download Your OpenLCBR Database
subquestion: |
  Your openlcbr database has been generated, and can be downloaded
  below. For information on how to use this file, see the documentation at
  [the docassemble-openlcbr github page].
  
  [Click here to download your database]
  
  [Click here to download your database]: ${ database.url_for() }
  [the docassemble-openlcbr github page]: https://github.com/Gauntlet173/docassemble-openlcbr
sets: summary
section: Conclusion
---
mandatory: True
question: |
  docassemble-openlcbr Reasoner Builder
subquestion: |
  This interview will take you step-by-step through the process of building an
  analogical case-based reasoner for use with docassemble-openlcbr.
  
  [docassemble-openlcbr] is the ABA Innovation Fellowship project of [Jason Morris 
  of Round Table Law] for the 2018/2019 year.  It is generously sponsored by [Clio].
  
  This software is in active development. If you become aware of problems with it,
  please report an issue at [the GitHub page for docassemble-openlcbr].
  
  [Jason Morris of Round Table Law]: https://www.twitter.com/RoundTableLaw
  [docassemble-openlcbr]: https://github.com/Gauntlet173/docassemble-openlcbr
  [Clio]: http://www.clio.com
  [the GitHub page for docassemble-openlcbr]: https://github.com/Gauntlet173/docassemble-openlcbr
field: intro
section: Introduction
---
question: |
  Factor Details
fields:
  - Internal ID: factors[i].id
    help: |
      This will be used internally only, and will not be displayed to the users.
  - Which Side Does This Factor Favour?: factors[i].side
    datatype: radio
    choices:
      - Defendant
      - Plaintiff
  - Short Description: factors[i].name
  - Long Description: factors[i].long_desc
    datatype: area
    help: |
      The long description should fill in the blank in the sentence "In this case, it was true that ___."
section: Factors
---
question: |
  Enter factors?
subquestion: |
  Do you want to specify factors for this database?
  
  [Factors] are things which are true or false about the fact scenario in the cases.
  
  [Factors]: ${ url_action('factors_intro') }
yesno: factors.there_are_any
section: Factors
---
question: |
  Enter additional factors?
subquestion: |
  Do you want to specify additional factors for this database?
  
  The factors specified so far include:
  
  % for f in factors:
  * ${ f.name }
  % endfor
yesno: factors.there_is_another
section: Factors
---
question: |
  Knock-Out Factors
subquestion: |
  Which of the factors in your database should be considered [knock-out factors]?
  
  [knock-out factors]: ${ url_action('model_intro') }
fields:
  - Knock Out Factors: model.ko_factors
    datatype: object_checkboxes
    choices:
      factors
section: Issues
---
question: |
  Enter Cases?
subquestion: |
  Do you want to specify cases for this database?
  
  Previous [cases] are used to determine the likely outcome of new fact patters.
  
  [cases]: ${url_action('cases_intro') }
yesno: cases.there_are_any
section: Cases
---
question: |
  Enter Additional Cases?
subquestion: |
  Do you want to specify additional cases for this database?
yesno: cases.there_is_another
section: Cases
---
question: |
  Case Details
fields:
  - Case ID: cases[i].id
  - Case Name: cases[i].name
  - Year Decided: cases[i].year
  - Citation: cases[i].cite
  - note: |
      [View Source]
      
      [View Source]: ${cases[i].cite}
  - Winner: cases[i].winner
    datatype: radio
    choices:
      - Plaintiff
      - Defendant
  - Factors Present In This Case: cases[i].factors
    datatype: object_checkboxes
    choices:
      factors
section: Cases
---
question: |
  Enter Issues?
subquestion: |
  Do you want to enter [issues] for this database?
  
  The Root Legal Issue is the main legal question your reasoner is designed to answer.
  
  [issues]: ${ url_action('model_intro') }
yesno: model.issues.build
section: Issues
---
if: model.issues.build
generic object: DAIBPIssue
question: Issue Details
subquestion: |
  What are the details of this sub-issue of "${x.id}"?
fields:
  - Issue ID: x.branches[i].id
  - Issue Name: x.branches[i].text
  - Winner If Unraised: x.branches[i].default
    required: False
    datatype: radio
    choices:
      - Plaintiff: 'p'
      - Defendant: 'd'
section: Issues
---
if: model.issues.build
generic object: DAIBPIssue
question: Root Issue Details
subquestion: |
  What are the details of the root legal issue?
fields:
  - Issue ID: model.issues.id
  - Issue Name: model.issues.text
  - Winner If Unraised: model.issues.default
    required: False
    datatype: radio
    choices:
      - Plaintiff: 'p'
      - Defendant: 'd'
section: Issues
---
generic object: DAIBPIssue
question: Enter Sub-Issues?
subquestion: |
  Does the issue "${ x.id }" have any sub-issues?
yesno: x.branches.there_are_any
section: Issues
---
generic object: DAIBPIssue
question: Enter Additional Sub-Issues?
subquestion: |
  Does the issue "${ x.id }" have another sub-issue?

  The subissues you have indicated so far are:
  
  % for b in x.branches:
  * ${ b.text }
  % endfor
yesno: x.branches.there_is_another
section: Issues
---
generic object: DAIBPIssue
question: Enter Logical Type For Issue
subquestion: |
  The sub-issues you have indicated for "${ x.id }" are:
  
  % for b in x.branches:
  * ${ b.text }
  % endfor
  
  Which is necessary to find that the issue "${ x.id }"?
  
  **All** of the sub-issues must be true for "${ x.id }" to be true, or
  
  **At least one** of the sub-issues must be true for "${ x.id }" to be true.
fields:
  - Join Type: x.join_type
    datatype: radio
    default: Conjunctive
    choices:
      - All Must Be True: 'conjunctive'
      - At Least One Must Be True: 'disjunctive'
section: Issues
---
generic object: DAIBPIssue
sets: x.factors.there_are_any
question: Factors Relevant to Issue
subquestion: |
  What are the factors relevant to the issue "${ x.id }"?
fields:
  - Factors For This Issue: x.factors
    datatype: object_checkboxes
    choices:
      factors
section: Issues
---
table: factor_table
rows: factors
columns:
  - ID: row_item.id
  - Name: row_item.name
  - Side: row_item.side
edit:
  - id
---
question: Review Factors
subquestion: |
 ${ factor_table }
 ${ factors.add_action() }
section: Factors
field: factors_reviewed
---
table: case_table
rows: cases
columns:
  - ID: row_item.id
  - Name: row_item.name
  - Year: row_item.year
edit:
  - id
---
question: Review Cases
subquestion: |
  ${ case_table }
  ${ cases.add_action() }
section: Cases
field: cases_reviewed
---
question: Review Knockout Features
subquestion: |
  The knock-out factors specified for your model are:
  
  % for kof in model.ko_factors:
  * ${ kof }
  % endfor
  
  ${ action_button_html(url_ask('model.ko_factors'),label="Edit Knock-Out Factors") }
section: Issues
field: ko_factors_reviewed
---
generic object: DAIBPIssue
event: issue_review_screen
question: |
  Review Issue: "${ issue_review_screen_target.id }"
subquestion: |
  % for b in issue_review_screen_target.branches:
  % if b.complete:
  % endif
  % endfor

  % if issue_review_screen_target.type <> "top":
  ${ action_button_html(url_action('set_irs_target', newtarget=issue_review_screen_target.parent.instanceName), label="Review Parent Issue") }
  % endif
  
  Field | Value | Actions
  ---|---|---
  ID | ${ issue_review_screen_target.id } | ${ action_button_html(url_ask(issue_review_screen_target.instanceName + ".id")) }
  Name | ${ issue_review_screen_target.text } | ${ action_button_html(url_ask(issue_review_screen_target.instanceName + ".text")) }
  Winner-if-Unraised | ${ issue_review_screen_target.default } | ${ action_button_html(url_ask(issue_review_screen_target.instanceName + ".default")) }
  % if issue_review_screen_target.type <> "leaf":
  Join Type | ${ issue_review_screen_target.join_type } | ${ action_button_html(url_ask(issue_review_screen_target.instanceName + ".join_type")) }
  % endif
  
  % if issue_review_screen_target.type == "leaf":
  ${ action_button_html(url_action("delete_leaf_node",node=issue_review_screen_target.instanceName),icon="trash",label="Delete This Node",color='danger') }
  % endif
  
  % if (issue_review_screen_target.type == "top" and len(issue_review_screen_target.branches) > 0) or issue_review_screen_target.type == "int":
  
  ####Sub-Issues
  
  Sub-Issue  |  Actions
  ---|---
  % for b in issue_review_screen_target.branches:
  ${b.id} |  ${ action_button_html(url_action('set_irs_target',newtarget=b.instanceName),label="Review Sub-Issue") }
  % endfor
  % endif
  
  % if issue_review_screen_target.type == "leaf" or (issue_review_screen_target.instanceName == "model.issues" and len(issue_review_screen_target.branches) == 0):
  ###Factors
  Relevant Factors:
  
  % for f in issue_review_screen_target.factors:
  * ${f.name}
  % endfor
  
  ${ action_button_html(url_ask(issue_review_screen_target.instanceName + ".factors"),label="Edit Factors") }
  % endif
  
  ${ action_button_html(url_action('add_issue_subnode',node=issue_review_screen_target.instanceName),label="Add a sub-issue to this issue",icon="plus-circle") }
buttons:
  - Finished Review of Issues:
      code: |
        issue_review_finished = True
section: Issues
---
generic object: DAIBPIssue
code: |
  m = re.search(r'^(.*)\.branches\[[0-9]+\]$',x.instanceName)
  x.parent = value(m.group(1))
  del m
---
event: set_irs_target
code: |
  newtarget = action_argument('newtarget')
  issue_review_screen_target = value(newtarget)
---
event: add_issue_subnode
code: |
  node = action_argument('node')
  # Get the current node.
  target = value(node)
  if target.type <> "int":
    target.type = "int"
    if len(target.factors) > 0:
      target.factors.clear()
  
  # Add an object to the node
  target.branches.appendObject(DAIBPIssue)
  target.branches.there_is_another = False
  target.branches.reset_gathered()
---
event: delete_leaf_node
code: |
  node = action_argument('node')
  m = re.search(r'^(.*)\[([0-9]+)\]$',node)
  list = m.group(1)
  index = int(m.group(2))
  del m
  object = value(list + '[' + str(index) + ']')
  target = value(list)
  parent = object.parent
  target.pop(index)
  
  #Recalculate this node.
  if len(target) == 0:
    parent.type = "leaf"
    if parent.attr('join_type') <> "":
      parent.join_type = ""
    parent.factors.reset_gathered()
    parent.factors.there_is_another = True
---
event: factors_intro
question: Factors
section: Factors
subquestion: |
  The first piece of information that the analogical reasoner will require is a list
  of the relevant "factors." A factor is a fact which may be true or false, and which
  makes it more or less likely that a legal issue will be determined for the Plaintiff.
  
  A factor includes an ID, a favored side, a short description, and a long description.
  
  The ID can be any unique sequence of letters and numbers.
  
  The favoured side will be "Plaintiff" if the presence of that factor makes it more
  likely that the Plaintiff will win on the root legal issue.  The favoured side
  is "Defendant" if the presence of the factor makes success less likely for the
  Plaintiff.
  
  The short description will seldom be used.  The long description should fill in the
  blank in the sentence "in this case, it was true that the ______________", and will
  usually start with either the word "defendant" or the word "plaintiff."
buttons:
  - Ok: continue
---
event: cases_intro
question: Cases
section: Cases
subquestion: |
  Now that we know what the relevant factors are, we need to give the analogical
  reasoner a set of cases to search.
  
  Each case includes an ID, a name, a citation, a year, a winner, and a list of
  factors that were present in that case.
  
  The ID can be any unique sequence of letters and numbers.
  
  The name is usually the style of cause of the case, such as "Joe v Schmoe".
  
  The citation is exactly what it sounds like. It tells the user where to find the
  original details on the case.
  
  The year is the year in which the case was decided.  This is not used by the
  algorithm, but is used to distinguish between multiple cases between the same
  parties.
  
  The winner is either Plaintiff or Defendant, depending on what happened at court.
  
  Lastly, the database needs a list of all of the factors which were present in that
  case.
buttons:
  - Ok: continue
---
event: model_intro
question: Model
section: Issues
subquestion: |
  Now that you have specified the factors and the cases, it is time to describe the
  analogical model of the case.  This has two parts: knock-out factors, and issues.
  
  The knock-out factors are just a subset of the factors in the database which can be
  used to distinguish cases.  If the factor existing in the test case and not existing
  in a case in the database would be a good reason to ignore the case in the database,
  that factor is a knock-out factor.
  
  Once you have specified knock-out factors, you will need to specify the issues.
  
  Each issue has an ID, a name. The ID can be any unique sequence of letters and numbers.
  The name usually can be used to fill in the blank in the following setence:
  "it was found that _________________".
  
  An issue may also have a default winner specified.  If there is a presumption in
  favour of the defendant or the plaintiff with regard to an issue, you can indicate
  that by specifying for whom the issue should be decided if none of the factors in
  the test case are relevant to that issue.
  
  Your issue will be one of three types.  Root, branch, or leaf.
  
  The root issue is the main legal issue that your legal reasoning tool is designed
  to answer.  It may act as a branch, or as a leaf, depending on whether it has
  any "sub-issues."
  
  A branch issue is one that has sub-issues.  If you specify sub-issues for an issue,
  you must also indicate whether all of those sub-issues must be found for the
  plaintiff in order for the branch issue to be found for the plaintiff (conjunctive
  sub-issues), or if it is
  enough that any one of the sub-issues are found for the plaintiff (disjunctive
  sub-issues).
  
  On the other hand, an issue that does not have sub-issues is a leaf issue. For leaf
  issues, you will also need to specify the factors that are relevant to that issue.
  Include both the factors that support the plaintiff and those that support the 
  defendant.
buttons:
  - Ok: continue
  